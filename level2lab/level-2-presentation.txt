Start by reading the requirements. 

Go over the tools and code you make use of, section by section.

For compute, mention how you made use of the count function to create 2 app vm's and again using count.index for the names.
Also mention the use of the vm extension feature to install IIS on the vm's.  Also how the dbvm doesn't have a pip.

Next, keyvault. I made use of this azure feature to store the vm passwords that way its not in plain sight on terraform, and so that the bastion host can access the vm's with no problem.
Show the nacl's and explain those ip addresses. 

main is just my resource group and the azure provider. Mention why you chose Canada East.

variables are just that.

For networking, explain the nsg for the app tier. RDP is allowed but only from my ip, and http for the internet to be able to access our IIS page.
For the data tier, I am only allowing sql port 1433 access from the app vm's. 
And finally the load balancer, which will ensure that traffic is balanced between both app vm's, which helps with high availability. 

Monitoring is set up for both app vm's and the db vm. Alerts will be sent to me directly.

Outputs is there to help me get the ip's right away.

Go to the environment and showcase that nothing is deployed at the moment. Now back to the vscode file, start off by commenting out;
in compute, everything under bastion.
keyvault entirely.
In networking, the load balancer.
Everything in monitoring.
In outputs, everything under bastion.
Everything in storage.

Explain that you need the bastion ip to be set up for the keyvault first and than you will be uncommenting the rest for deployment.

There is a feature to run things in priority but I was short on time and wanted to get things working first.
When everything is deployed, edit the keyvault ip to allow the bastion.

now apply for everything else.

Go through every task. For step 3 compute, go to the load balancer ip to showcase the iis page, also rdp into both. 
Next for the dbvm, rdp inside, adjust firewall rules to allow port 1433 inbound communication. 
Once thats done, run this command in the app vm --- Test-NetConnection -ComputerName 10.1.2.4 -Port 1433 --- and show that it works.

For High availability, stop one of the vm's to show that the web page still loads, and than start that other vm and stop the other one, reload the lb ip.
Also show that you have health probes set up.

For Monitoring, show the alerts set in monitor. And for the dashboards, go to monitor, for network click network insights, click on load balancer and nic and pin those dashboards to your wall.
For VM's, go to metrics, select your rg, select the vm's, and select the scope (disk iops and cpu%). 

Destroy everything.